// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package temppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TempClient is the client API for Temp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TempClient interface {
	TempStream(ctx context.Context, in *TempRequest, opts ...grpc.CallOption) (Temp_TempStreamClient, error)
}

type tempClient struct {
	cc grpc.ClientConnInterface
}

func NewTempClient(cc grpc.ClientConnInterface) TempClient {
	return &tempClient{cc}
}

func (c *tempClient) TempStream(ctx context.Context, in *TempRequest, opts ...grpc.CallOption) (Temp_TempStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Temp_ServiceDesc.Streams[0], "/temps.Temp/TempStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tempTempStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Temp_TempStreamClient interface {
	Recv() (*TempResponse, error)
	grpc.ClientStream
}

type tempTempStreamClient struct {
	grpc.ClientStream
}

func (x *tempTempStreamClient) Recv() (*TempResponse, error) {
	m := new(TempResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TempServer is the server API for Temp service.
// All implementations must embed UnimplementedTempServer
// for forward compatibility
type TempServer interface {
	TempStream(*TempRequest, Temp_TempStreamServer) error
	mustEmbedUnimplementedTempServer()
}

// UnimplementedTempServer must be embedded to have forward compatible implementations.
type UnimplementedTempServer struct {
}

func (UnimplementedTempServer) TempStream(*TempRequest, Temp_TempStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TempStream not implemented")
}
func (UnimplementedTempServer) mustEmbedUnimplementedTempServer() {}

// UnsafeTempServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TempServer will
// result in compilation errors.
type UnsafeTempServer interface {
	mustEmbedUnimplementedTempServer()
}

func RegisterTempServer(s grpc.ServiceRegistrar, srv TempServer) {
	s.RegisterService(&Temp_ServiceDesc, srv)
}

func _Temp_TempStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TempRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TempServer).TempStream(m, &tempTempStreamServer{stream})
}

type Temp_TempStreamServer interface {
	Send(*TempResponse) error
	grpc.ServerStream
}

type tempTempStreamServer struct {
	grpc.ServerStream
}

func (x *tempTempStreamServer) Send(m *TempResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Temp_ServiceDesc is the grpc.ServiceDesc for Temp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Temp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "temps.Temp",
	HandlerType: (*TempServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TempStream",
			Handler:       _Temp_TempStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/temp.proto",
}
